#!/bin/bash

set -ev

printf "Executing generate_config.sh...\n"

# don't rewrite paths for Windows Git Bash users
export MSYS_NO_PATHCONV=1
export PATH=$GOPATH/src/github.com/hyperledger/fabric/build/bin:${PWD}/../bin:${PWD}:$PATH
export CURRENT_DIR=$PWD

printf "\n Step 1 - Removing files from config and crypto-config folders...\n\n"

rm -rf ./config
rm -rf ./crypto-config
mkdir ./config
mkdir ./crypto-config

# ##############################################################################
# 2. GENERATING CRYPTO MATERIAL
# ##############################################################################

printf "\n Step 2 - Generating crypto material...\n\n"

#
# IN:
# --config: yaml file with crypto config needed
# OUT:
# cryto-config folder contents (ordererOrganizations & peerOrganizations)
./bin/cryptogen generate --config=./crypto-config.yaml

# ##############################################################################
# 3. GENERATING GENESIS BLOCK FOR ORDERER
# ##############################################################################

printf "\n Step 3 - Generating Genesis Block for orderer...\n\n"

# IMPORTANT: Execute this script one time for channel

#
# PRE:
# - configtx.yaml needed
# IN:
# -profile: Name of the profile applied (defined in configtx.yaml)
# -outputBlock: file generated with the Genesis Block
# OUT:
# The Genesis Block will be generated in the path defined in -outputBlock parameter

# SIN CANAL
./bin/configtxgen -profile MinimalOrdererGenesis -outputBlock ./config/genesis.block

# ##############################################################################
# 4. GENERATING CHANNEL CONFIGURATION
# ##############################################################################

printf "\n Step 4 - Generating Channel Configuration...\n\n"

# IMPORTANT: Execute this script one time for channel

#
# PRE:
# - configtx.yaml needed
# IN:
# -profile: name of the profile applied (defined in configtx.yaml)
# -channelID: ID of the channel
# -outputCreateChannelTx: file generated as output
# OUT:
# Creates <<namechannel>>.tx file in the path defined in -outputCreateChannelTx
./bin/configtxgen -profile MinimalChannel0 -channelID channel0 -outputCreateChannelTx ./config/channel0.tx

# ##############################################################################
# 5. GENERATING ANCHOR PEER
# ##############################################################################

printf "\n Step 5 - Updating Anchor Peers...\n\n"

# IMPORTANT: Execute this script one time for channel

#
# PRE:
# - configtx.yaml needed
# IN:
# -profile: name of the profile applied (defined in configtx.yaml)
# -channelID: ID of the channel
# -asOrg: Organization name
# -outputCreateChannelTx: file generated as output
# OUT:
# Creates <<namechannel>>.tx file in the path defined in -outputCreateChannelTx
./bin/configtxgen -profile MinimalChannel0 -channelID channel0 -asOrg Org1MSP -outputAnchorPeersUpdate ./config/Org1MSPanchorsChannel0.tx

# ##############################################################################
# 6. REPLACING PK OR ORGANIZATIONS
# ##############################################################################

printf "\n Step 6 - Replacing PK of organizations in docker-compose.yml...\n\n"

# IMPORTANT: Execute this script one time for organization

# Generate a new docker-compose.yml from docker-compose.yml.BAK
cd $CURRENT_DIR
rm -f docker-compose.yml
cp docker-compose.yml.BAK docker-compose.yml

# ORG 1
cd ./crypto-config/peerOrganizations/org1.ust.com/ca
CA1_PK=$(ls *_sk)
cd $CURRENT_DIR
sed -it "s/CA.ORG1.UST.COM_SK/${CA1_PK}/g" ./docker-compose.yml

# Deletes the ymlt generated by sed as backup
rm docker-compose.ymlt

printf "\n All tasks executed OK!\n\n"
